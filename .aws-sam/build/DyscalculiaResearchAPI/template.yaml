AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Dyscalculia Research Assistant with Custom Domain

Parameters:
  DomainName:
    Type: String
    Default: dyscalculiatools.com
    Description: The custom domain name
  CertificateArn:
    Type: String
    Default: arn:aws:acm:us-east-1:536697250341:certificate/1f5ff665-ee83-45b7-b66c-6a3d2bb9bdc4
    Description: ARN of the ACM certificate for the domain (must be in us-east-1)

Globals:
  Function:
    Timeout: 30
    MemorySize: 512

Resources:
  # S3 Bucket for static assets
  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "dyscalculia-tools-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Project
          Value: DyscalculiaTools
        - Key: Environment
          Value: Production

  # CloudFront Origin Access Control
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub "${AWS::StackName}-OAC"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # S3 Bucket Policy for CloudFront OAC
  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebsiteBucket
      PolicyDocument:
        Statement:
          - Sid: AllowCloudFrontOAC
            Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: s3:GetObject
            Resource: !Sub "${WebsiteBucket.Arn}/*"
            Condition:
              StringEquals:
                AWS:SourceArn: !Sub "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref DomainName
          - !Sub "www.${DomainName}"
        DefaultCacheBehavior:
          TargetOriginId: APIOrigin
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # Managed-AllViewerExceptHostHeader
        CacheBehaviors:
          - PathPattern: "/api/*"
            TargetOriginId: APIOrigin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # Managed-CachingDisabled
            OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # Managed-AllViewerExceptHostHeader
          - PathPattern: "*.css"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.js"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.json"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.ico"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.png"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.jpg"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          - PathPattern: "*.svg"
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: redirect-to-https
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt WebsiteBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOAC
          - Id: APIOrigin
            DomainName: !Sub "${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com"
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
        Enabled: true
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2021

  # Lambda function for backend API
  DyscalculiaResearchAPI:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: .
      Handler: lambda.lambda_function.lambda_handler
      Runtime: python3.11
      AutoPublishAlias: live
      Environment:
        Variables:
          S3_BUCKET: !Ref WebsiteBucket
          CDN_URL: !Sub "https://${DomainName}"
      Tags:
        Project: DyscalculiaTools
        Environment: Production
      Events:
        # Handle all routes
        RootPath:
          Type: HttpApi
          Properties:
            Path: /
            Method: get
        AboutPath:
          Type: HttpApi
          Properties:
            Path: /about
            Method: get
        ToolPath:
          Type: HttpApi
          Properties:
            Path: /tool/{id}
            Method: get
        SearchAPI:
          Type: HttpApi
          Properties:
            Path: /api/search
            Method: post
        GenerateBriefAPI:
          Type: HttpApi
          Properties:
            Path: /api/generate-brief
            Method: post
        HealthAPI:
          Type: HttpApi
          Properties:
            Path: /api/health
            Method: get
        OptionsAPI:
          Type: HttpApi
          Properties:
            Path: /api/{proxy+}
            Method: options
        CatchAll:
          Type: HttpApi
          Properties:
            Path: /{proxy+}
            Method: get

  # CloudWatch Alarms for monitoring
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-Lambda-Errors"
      AlarmDescription: Alert when Lambda function has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref DyscalculiaResearchAPI
      TreatMissingData: notBreaching

  ApiGateway5xxAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-API-5xx-Errors"
      AlarmDescription: Alert when API Gateway has 5xx errors
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: ApiId
          Value: !Ref ServerlessHttpApi
      TreatMissingData: notBreaching

Outputs:
  WebsiteURL:
    Description: "Website URL"
    Value: "https://dyscalculiatools.com"
  CloudFrontDistributionId:
    Description: "CloudFront Distribution ID"
    Value: !Ref CloudFrontDistribution
  S3BucketName:
    Description: "S3 Bucket for website content"
    Value: !Ref WebsiteBucket
  DyscalculiaResearchAPI:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  NewAPIGatewayId:
    Description: "HTTP API Gateway ID"
    Value: !Ref ServerlessHttpApi
